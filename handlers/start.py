from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from database.crud import create_user, get_user_by_tg
from keyboards.main import start_buttons, generate_fruit_captcha
from datetime import datetime, timedelta

router = Router()
captcha_answers = {}

ADMINS = ["enjoyoneday", "whatyousayah"]

start_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FaceVPN ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —â–∏—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ üõ°Ô∏è
üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, —Å–∫—Ä—ã—Ç–∏–µ IP, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É.
üåç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É!
"""

def get_start_buttons(username: str) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row[:] for row in start_buttons.inline_keyboard])
    if username in ADMINS:
        keyboard.inline_keyboard.insert(
            0,
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üïµÔ∏è‚Äç‚ôÇÔ∏è", callback_data="check_ref")]
        )
    return keyboard

def generate_captcha():
    return generate_fruit_captcha()

@router.message(CommandStart())
async def start_handler(message: Message, command: CommandStart):
    if message.from_user.is_bot:
        return

    user = await get_user_by_tg(message.from_user.id)
    if user:
        await message.answer(start_text, reply_markup=get_start_buttons(message.from_user.username), parse_mode=ParseMode.HTML)
        return

    args = command.args
    ref_code = None
    if args:
        try:
            ref_code = int(args)
        except ValueError:
            ref_code = None

    correct, keyboard = generate_captcha()
    captcha_answers[message.from_user.id] = {"correct": correct, "ref_code": ref_code}

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä—É–∫—Ç: {correct}",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@router.callback_query(lambda c: c.data.startswith("captcha_"))
async def captcha_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    selected = callback.data.replace("captcha_", "")
    data = captcha_answers.get(user_id)

    if not data:
        await callback.answer("‚ùå –í—Ä–µ–º—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    if selected == data["correct"]:
        user = await create_user(
            tg_id=user_id,
            username=callback.from_user.username,
            full_name=callback.from_user.full_name,
            ref_code=data["ref_code"]
        )

        if data["ref_code"] and data["ref_code"] != user_id:
            referrer = await get_user_by_tg(data["ref_code"])
            if referrer:
                referrer.is_premium = True
                if not referrer.premium_until:
                    referrer.premium_until = datetime.utcnow() + timedelta(days=7)
                else:
                    referrer.premium_until += timedelta(days=7)
                try:
                    await callback.bot.send_message(
                        referrer.tg_id,
                        "üéâ –í–∞—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +7 –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞."
                    )
                except:
                    pass

        captcha_answers.pop(user_id)
        await callback.message.edit_text(
            "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!\n" + start_text,
            reply_markup=get_start_buttons(callback.from_user.username),
            parse_mode=ParseMode.HTML
        )
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@router.callback_query(F.data == "back_button")
async def back_button(callback: CallbackQuery):
    await callback.message.edit_text(
        start_text,
        reply_markup=get_start_buttons(callback.from_user.username),
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data == "subscribe")
async def subscribe_redirect(callback: CallbackQuery):
    from handlers.subscription import subscribe_menu
    await subscribe_menu(callback)